import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import os
import numpy as np
from scipy import stats

# Constantes de convers√£o
MEGA_TO_SI = 1e6 # 1 MPa = 10^6 Pa
MM_TO_SI = 1e-3 # 1 mm = 10^-3 m
MM2_TO_SI = 1e-6 # 1 mm¬≤ = 10^-6 m¬≤ 

# Constantes da Norma (Novo)
PERCENTUAL_MIN_MODULO = 0.10 # 10% da tens√£o m√°xima
PERCENTUAL_MAX_MODULO = 0.40 # 40% da tens√£o m√°xima

# ------------------------------------------------------------
# CONFIGURA√á√ïES INICIAIS
# ------------------------------------------------------------
st.set_page_config(page_title="An√°lise M√≥dulo de Elasticidade (Norma)", layout="wide")
st.markdown("### üß± M√≥dulo de Elasticidade (10% - 40% da Tens√£o M√°xima)")
st.markdown(f"#### **C√°lculo baseado na norma:** O M√≥dulo $E$ √© obtido pela regress√£o linear na regi√£o entre **{PERCENTUAL_MIN_MODULO*100:.0f}%** e **{PERCENTUAL_MAX_MODULO*100:.0f}%** da Tens√£o M√°xima do CP.")

# ------------------------------------------------------------
# CONSTANTES E DEFINI√á√ïES
# ------------------------------------------------------------
L0_MM = 50.0 # comprimento inicial do extens√¥metro (mm)
L0_SI = L0_MM * MM_TO_SI # L0 em metros
pasta_ensaios = "ensaios" # Assumindo que os arquivos CSV dos ensaios est√£o nesta pasta
COLUNAS_GERAL = [
    "cp", "nome", "largura", "espessura", 
    "ret_ext", "area", "forca_max", "tensao_max", "energia"
]

# ------------------------------------------------------------
# CARREGAR ARQUIVO GERAL (Para obter as dimens√µes)
# ------------------------------------------------------------
try:
    geral = pd.read_csv(
        "geral.csv", 
        sep=";", 
        decimal=",", 
        encoding_errors="ignore",
        header=None,       
        skiprows=1, # Corrigido para pular apenas a primeira linha
        names=COLUNAS_GERAL 
    )
    
    # GARANTINDO O TIPO NUM√âRICO
    geral["area"] = pd.to_numeric(geral["area"], errors='coerce')
    geral["largura"] = pd.to_numeric(geral["largura"], errors='coerce')
    geral["espessura"] = pd.to_numeric(geral["espessura"], errors='coerce')
    
    # Extrai o n√∫mero do CP para auxiliar na filtragem/ordenacao
    geral["cp_num"] = geral["cp"].str.extract(r"(\d+)").astype(str)
except FileNotFoundError:
    st.error("‚ùå Arquivo 'geral.csv' n√£o encontrado no diret√≥rio do projeto.")
    st.stop()
except Exception as e:
    st.error(f"‚ùå Erro na leitura do arquivo general.csv: {e}")
    st.stop()

if geral.empty or not {"cp", "area", "cp_num"}.issubset(geral.columns):
    st.error("‚ùå O arquivo general.csv n√£o p√¥de ser lido corretamente.")
    st.stop()

# ------------------------------------------------------------
# LISTA DE CPs DISPON√çVEIS E ORDENA√á√ÉO
# ------------------------------------------------------------
cp_disponiveis = geral[geral['area'].notna() & (geral['area'] > 0)]["cp"].tolist()
if not cp_disponiveis:
    st.error("‚ùå Nenhum Corpo de Prova com √°rea v√°lida encontrado.")
    st.stop()

# Ordena√ß√£o Num√©rica dos CPs
cp_opcoes = sorted(
    cp_disponiveis, 
    key=lambda cp: int(cp.split()[-1]) if cp.split()[-1].isdigit() else 0
)
cp_opcoes.insert(0, "Selecione um CP")

# ------------------------------------------------------------
# SELE√á√ÉO DO CP
# ------------------------------------------------------------
st.sidebar.header('Sele√ß√£o de Corpo de Prova')
cp_selecionado = st.sidebar.selectbox("Selecione o CP:", cp_opcoes)

if cp_selecionado == "Selecione um CP":
    st.info("Selecione um Corpo de Prova na barra lateral.")
    st.stop()

cp_info = geral[geral["cp"] == cp_selecionado].iloc[0]
cp_num = cp_info["cp_num"]
area = cp_info["area"] # √Årea em mm¬≤

# ------------------------------------------------------------
# CARREGAMENTO E PROCESSAMENTO DOS DADOS DO ENSAIO
# ------------------------------------------------------------
caminho_csv = os.path.join(pasta_ensaios, f"{cp_num}.csv")
if not os.path.exists(caminho_csv):
    st.warning(f"‚ö†Ô∏è Arquivo do ensaio '{cp_num}.csv' n√£o encontrado. Verifique a pasta '{pasta_ensaios}'.")
    st.stop()

try:
    df_ensaio = pd.read_csv(caminho_csv, sep=";", decimal=",", encoding_errors="ignore")
    df_ensaio.columns = ["tempo_s", "deformacao_mm", "forca_n"]
    df_ensaio["tempo_s"] = pd.to_numeric(df_ensaio["tempo_s"], errors="coerce")
    df_ensaio["deformacao_mm"] = pd.to_numeric(df_ensaio["deformacao_mm"], errors="coerce")
    df_ensaio["forca_n"] = pd.to_numeric(df_ensaio["forca_n"], errors="coerce")
    df_ensaio = df_ensaio.dropna(subset=["tempo_s", "deformacao_mm", "forca_n"]).sort_values(by="tempo_s").reset_index(drop=True)
    
except Exception as e:
    st.error(f"Erro ao ler ou processar o arquivo {caminho_csv}: {e}")
    st.stop()

if df_ensaio.empty:
    st.error(f"O arquivo {caminho_csv} n√£o cont√©m dados v√°lidos para plotagem.")
    st.stop()

# ------------------------------------------------------------
# C√ÅLCULOS (Tens√£o em Pascal e Deforma√ß√£o Espec√≠fica)
# ------------------------------------------------------------
if area <= 0 or pd.isna(area):
      st.error(f"‚ùå √Årea do CP {cp_selecionado} inv√°lida ou zero ({area} mm¬≤).")
      st.stop()

# Tens√£o (N/mm¬≤) * 10^6 = Pa.
df_ensaio["tensao_pa"] = (df_ensaio["forca_n"] / area) * MEGA_TO_SI 
# Deforma√ß√£o Espec√≠fica (mm/mm)
df_ensaio["deformacao_especifica"] = -df_ensaio["deformacao_mm"] / L0_MM 

# ------------------------------------------------------------
# C√ÅLCULO E FILTRAGEM BASEADOS NA NORMA (NOVA L√ìGICA)
# ------------------------------------------------------------

# 1. Determinar a Tens√£o M√°xima do Ensaio
tensao_max_pa = df_ensaio["tensao_pa"].max()

if tensao_max_pa <= 0:
    st.warning("‚ö†Ô∏è Tens√£o m√°xima nula ou negativa. N√£o √© poss√≠vel aplicar o filtro da norma.")
    st.stop()

# 2. Definir os Limites de Tens√£o da Regi√£o El√°stica
sigma_inferior_pa = PERCENTUAL_MIN_MODULO * tensao_max_pa
sigma_superior_pa = PERCENTUAL_MAX_MODULO * tensao_max_pa

# 3. Filtrar os Dados
df_filtrado = df_ensaio[
    (df_ensaio["tensao_pa"] >= sigma_inferior_pa) & 
    (df_ensaio["tensao_pa"] <= sigma_superior_pa)
].copy()

# ------------------------------------------------------------
# C√ÅLCULO DO M√ìDULO DE ELASTICIDADE (E) E R¬≤
# ------------------------------------------------------------
E_modulo = np.nan
r_squared = np.nan
intercept = np.nan
regressao_info = "N√£o foi poss√≠vel calcular. Intervalo de tens√£o (10%-40%) n√£o cont√©m dados."

if len(df_filtrado) >= 2:
    try:
        # A regress√£o usa Deforma√ß√£o (adimensional) e Tens√£o (Pa) -> E_modulo sai em Pa
        slope, intercept, r_value, p_value, std_err = stats.linregress(
            df_filtrado["deformacao_especifica"], df_filtrado["tensao_pa"]
        )
        E_modulo = slope # E_modulo agora est√° em Pa
        r_squared = r_value**2
        
        # Apenas para mostrar a equa√ß√£o no Streamlit
        regressao_info = f"\\sigma\\text{{(Pa)}} = ({E_modulo:,.2e}) \\cdot \\varepsilon + ({intercept:,.2e})"
    except ValueError:
        regressao_info = "Erro ao calcular regress√£o: dados inv√°lidos no intervalo filtrado."
        
# ------------------------------------------------------------
# EXIBI√á√ÉO DOS RESULTADOS NA SIDEBAR
# ------------------------------------------------------------
st.sidebar.markdown("---")
st.sidebar.subheader("Resultado do M√≥dulo pela Norma")

st.sidebar.metric(
    label="Tens√£o M√°xima ($\sigma_{m√°x}$)",
    value=f"{tensao_max_pa:,.2e} Pa",
    help="Tens√£o m√°xima atingida no ensaio (em Pascal)."
)

st.sidebar.metric(
    label="M√≥dulo de Elasticidade ($E$)",
    value=f"{E_modulo:,.5e} Pa" if not np.isnan(E_modulo) else "N/A",
    help="Inclina√ß√£o da regress√£o linear na faixa de 10% a 40% da tens√£o m√°xima (em Pascal)."
)
st.sidebar.metric(
    label="Coeficiente de Determina√ß√£o ($R^2$)",
    value=f"{r_squared:,.4f}" if not np.isnan(r_squared) else "N/A",
    help="Mede o qu√£o bem a regress√£o linear se ajusta aos dados filtrados."
)

st.sidebar.markdown("---")
st.sidebar.caption(f"Filtro Autom√°tico Aplicado:")
st.sidebar.write(f"$\sigma$ Inferior (10%): **{sigma_inferior_pa:,.2e} Pa**")
st.sidebar.write(f"$\sigma$ Superior (40%): **{sigma_superior_pa:,.2e} Pa**")
st.sidebar.write(f"Pontos Filtrados: **{len(df_filtrado)}**")

st.markdown("---")

# ------------------------------------------------------------
# INFORMA√á√ïES DO CP (AGORA EM SI)
# ------------------------------------------------------------
st.markdown("### üìÑ Informa√ß√µes do Corpo de Prova Selecionado (Unidades SI)")

# Convers√£o das dimens√µes para SI
cp_dados_si = {
    "CP": [cp_info["cp"]],
    "Nome": [cp_info["nome"]],
    "Largura (m)": [cp_info["largura"] * MM_TO_SI],
    "Espessura (m)": [cp_info["espessura"] * MM_TO_SI],
    "√Årea (m¬≤)": [cp_info["area"] * MM2_TO_SI],
}
df_cp_si = pd.DataFrame(cp_dados_si)

# Formatando para exibi√ß√£o em nota√ß√£o cient√≠fica com 5 casas
for col in ["Largura (m)", "Espessura (m)", "√Årea (m¬≤)"]:
    df_cp_si[col] = df_cp_si[col].apply(lambda x: f"{x:,.5e}" if not pd.isna(x) else "N/A")

st.dataframe(df_cp_si, use_container_width=True, hide_index=True)

# L0 em metros
st.sidebar.metric(
    label="Comprimento Inicial ($L_0$)", 
    value=f"{L0_SI:,.5e} m", 
    help="Utilizado para calcular a Deforma√ß√£o Espec√≠fica. (50 mm)"
)

# ------------------------------------------------------------
# PLOTAGEM DOS GR√ÅFICOS
# ------------------------------------------------------------
# --- Gr√°fico 1: TENS√ÉO x TEMPO ---
# (Manteremos os gr√°ficos de tempo para refer√™ncia, apesar de n√£o serem mais usados para filtro)
fig_tensao = px.line(df_ensaio, x="tempo_s", y="tensao_pa", title="Tens√£o (Pa) Aplicada ao Longo do Tempo", labels={"tempo_s": "Tempo (s)", "tensao_pa": "Tens√£o (Pa)"})
fig_tensao.add_hline(y=0, line_dash="dash", line_color="gray")
fig_tensao.update_traces(line=dict(width=2))
fig_tensao.update_layout(template="plotly_white")
st.plotly_chart(fig_tensao, use_container_width=True)
st.markdown("---") 

# --- Gr√°fico 3: TENS√ÉO x DEFORMA√á√ÉO ESPEC√çFICA (COM FILTRO DA NORMA) ---
st.subheader("2. Tens√£o ($\sigma$) x Deforma√ß√£o Espec√≠fica ($\\varepsilon$)")
st.caption(f"Regress√£o na regi√£o de 10% a 40% da Tens√£o M√°xima.")

fig_tensao_deformacao = go.Figure()

# 1. Curva Completa (Linha)
fig_tensao_deformacao.add_trace(go.Scatter(
    x=df_ensaio["deformacao_especifica"],
    y=df_ensaio["tensao_pa"],
    mode='lines',
    line=dict(color='gray', width=1.5),
    name='Curva Completa'
))

# 2. Pontos Filtrados (Scatter)
fig_tensao_deformacao.add_trace(go.Scatter(
    x=df_filtrado["deformacao_especifica"],
    y=df_filtrado["tensao_pa"],
    mode='markers',
    marker=dict(size=5, color='blue'),
    name=f'Pontos Filtrados (10% a 40%)'
))

# 3. Adiciona a Trendline CALCULADA MANUALMENTE
if not np.isnan(E_modulo):
    # Usamos os limites de tens√£o para encontrar os limites de deforma√ß√£o para plotar a reta
    eps_min_plot = df_filtrado["deformacao_especifica"].min()
    eps_max_plot = df_filtrado["deformacao_especifica"].max()
    
    x_line = np.array([eps_min_plot, eps_max_plot])
    y_line = E_modulo * x_line + intercept

    fig_tensao_deformacao.add_trace(go.Scatter(
        x=x_line,
        y=y_line,
        mode='lines',
        line=dict(color='red', width=3, dash='dash'),
        name=f'Regress√£o Linear (E = {E_modulo:,.2e} Pa, R¬≤ = {r_squared:,.4f})'
    ))
    
    st.info(f"F√≥rmula da Regress√£o na Regi√£o Filtrada: ${regressao_info}$")

# Adiciona linhas de refer√™ncia para os limites (NOVO)
fig_tensao_deformacao.add_hline(y=sigma_inferior_pa, line_dash="dot", line_color="green", name="10% $\sigma_{m√°x}$", annotation_text="10% $\sigma_{m√°x}$")
fig_tensao_deformacao.add_hline(y=sigma_superior_pa, line_dash="dot", line_color="orange", name="40% $\sigma_{m√°x}$", annotation_text="40% $\sigma_{m√°x}$")


# Configura√ß√µes do Layout
fig_tensao_deformacao.update_layout(
    title="Curva Tens√£o x Deforma√ß√£o Espec√≠fica",
    xaxis_title="Deforma√ß√£o Espec√≠fica - (mm/mm)",
    yaxis_title="Tens√£o (Pa)", 
    template="plotly_white",
    hovermode="x unified"
)

# Adiciona linhas no zero
fig_tensao_deformacao.add_hline(y=0, line_dash="dash", line_color="gray")
fig_tensao_deformacao.add_vline(x=0, line_dash="dash", line_color="gray")

st.plotly_chart(
    fig_tensao_deformacao, 
    use_container_width=True,
    key="interactive_plot_g3"
)


# ------------------------------------------------------------
# DOWNLOAD DOS DADOS PROCESSADOS E RESULTADOS
# ------------------------------------------------------------
st.markdown("---")
st.markdown("### ‚¨áÔ∏è Exportar Dados e Resultados de An√°lise")

# 1. Exporta√ß√£o dos Resultados da An√°lise de Regress√£o
if not np.isnan(E_modulo):
    
    data_resultados = {
        "CP": [cp_selecionado],
        "M√≥dulo de Elasticidade (E) [Pa]": [E_modulo], 
        "Coeficiente de Determina√ß√£o (R2)": [r_squared],
        "Intercepto da Regress√£o (b) [Pa]": [intercept], 
        "Tens√£o M√°xima (sigma_max) [Pa]": [tensao_max_pa],
        "Limite Inferior Tens√£o (sigma_min) [Pa]": [sigma_inferior_pa], 
        "Limite Superior Tens√£o (sigma_max) [Pa]": [sigma_superior_pa], 
    }
    df_resultados = pd.DataFrame(data_resultados)
    
    csv_resultados = df_resultados.to_csv(
        index=False, 
        sep=';', 
        decimal='.', 
        encoding='latin-1',
        float_format='%.5e' # Nota√ß√£o cient√≠fica com 5 casas ap√≥s o ponto
    ).encode('latin-1')

    # Bot√£o para download dos Resultados
    st.download_button(
        label=f"‚úÖ Baixar Resultados da An√°lise de Regress√£o ({cp_selecionado}) - SI",
        data=csv_resultados,
        file_name=f'resultados_regressao_norma_{cp_selecionado}_SI_5e.csv',
        mime='text/csv',
        help="Exporta os resultados da regress√£o (10%-40% da Tens√£o M√°xima) em Pascal (SI)."
    )
else:
    st.warning("‚ö†Ô∏è O M√≥dulo de Elasticidade n√£o p√¥de ser calculado. Verifique se o CP tem tens√£o m√°xima positiva.")

# 2. Exporta√ß√£o dos Dados Completos
df_export_completo = df_ensaio[["tempo_s", "deformacao_mm", "forca_n", "tensao_pa", "deformacao_especifica"]].copy()
df_export_completo = df_export_completo.rename(columns={"tensao_pa": "tensao_pa"})

csv_export = df_export_completo.to_csv(
    index=False, sep=';', decimal=',', encoding='latin-1'
).encode('latin-1')

# Bot√£o para download dos Dados Completos
st.download_button(
    label=f"üì• Baixar CSV de Dados Completos ({cp_selecionado})",
    data=csv_export,
    file_name=f'dados_completos_ordem_temporal_{cp_selecionado}.csv',
    mime='text/csv',
    help="Exporta todas as colunas de tempo, deforma√ß√£o, for√ßa, tens√£o (Pa) e deforma√ß√£o espec√≠fica, na ordem temporal."
)